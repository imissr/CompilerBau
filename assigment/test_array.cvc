#include "civic.h"
extern void printIntVec(int[n] vec);
extern void printFloatVec(float[n] vec);
extern void printIntMat(int[m,n] mat);
extern void printFloatMat(float[m,n] mat);
extern void scanIntVec(int[n] vec);
extern void scanFloatVec(float[n] vec);
extern void scanIntMat(int[m,n] mat);
extern void scanFloatMat(float[m,n] mat);
extern void matMul(float[m,n] a, float[o,p] b, float[q,l] c);
extern void queens(bool[m,n] a);


export int main() {
int[5] vi = [1,2,3,4,5];
float[4] vf = [1.0, 2.5, -3.0, 4.0];
printIntVec(vi);
printFloatVec(vf);


int[2,3] mi = [[1,2,3],[4,5,6]];
float[2,2] mf = [[1.0,2.0],[3.0,4.0]];
printIntMat(mi);
printFloatMat(mf);


float[2,3] A = [[1.0,2.0,3.0],[4.0,5.0,6.0]];
float[3,2] B = [[7.0,8.0],[9.0,10.0],[11.0,12.0]];
float[2,2] C = 0.0; // scalar fill
matMul(A,B,C);
printFloatMat(C); // expected: [[58,64],[139,154]]


bool[8,8] board = false;
queens(board);
// print as 1/0 chessboard
for (int r = 0, 8) {
for (int c = 0, 8) { printInt((int)board[r,c]); if (c + 1 < 8) printSpaces(1); }
printNewlines(1);
}


return 0;
}