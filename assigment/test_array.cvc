#include "civic.h"
extern void printIntVec(int[n] vec);
extern void printFloatVec(float[n] vec);
extern void printIntMat(int[m,n] mat);
extern void printFloatMat(float[m,n] mat);
extern void scanIntVec(int[n] vec);
extern void scanFloatVec(float[n] vec);
extern void scanIntMat(int[m,n] mat);
extern void scanFloatMat(float[m,n] mat);
extern void matMul(float[m,n] a, float[o,p] b, float[q,l] c);
extern void queens(bool[m,n] a);


export int main() {
int[5] vi;
float[4] vf;
int[2,3] mi;
float[2,2] mf;
float[2,3] A;
float[3,2] B;
float[2,2] C;
bool[8,8] board;
int i;
int j;
int r;
int c;

// Initialize vi = [1,2,3,4,5]
vi[0] = 1;
vi[1] = 2;
vi[2] = 3;
vi[3] = 4;
vi[4] = 5;
printIntVec(vi);

// Initialize vf = [1.0, 2.5, -3.0, 4.0]
vf[0] = 1.0;
vf[1] = 2.5;
vf[2] = -3.0;
vf[3] = 4.0;
printFloatVec(vf);

// Initialize mi = [[1,2,3],[4,5,6]]
mi[0,0] = 1;
mi[0,1] = 2;
mi[0,2] = 3;
mi[1,0] = 4;
mi[1,1] = 5;
mi[1,2] = 6;
printIntMat(mi);

// Initialize mf = [[1.0,2.0],[3.0,4.0]]
mf[0,0] = 1.0;
mf[0,1] = 2.0;
mf[1,0] = 3.0;
mf[1,1] = 4.0;
printFloatMat(mf);

// Initialize A = [[1.0,2.0,3.0],[4.0,5.0,6.0]]
A[0,0] = 1.0;
A[0,1] = 2.0;
A[0,2] = 3.0;
A[1,0] = 4.0;
A[1,1] = 5.0;
A[1,2] = 6.0;

// Initialize B = [[7.0,8.0],[9.0,10.0],[11.0,12.0]]
B[0,0] = 7.0;
B[0,1] = 8.0;
B[1,0] = 9.0;
B[1,1] = 10.0;
B[2,0] = 11.0;
B[2,1] = 12.0;

// Initialize C = 0.0 (scalar fill)
i = 0;
while (i < 2) {
  j = 0;
  while (j < 2) {
    C[i,j] = 0.0;
    j = j + 1;
  }
  i = i + 1;
}

matMul(A,B,C);
printFloatMat(C); // expected: [[58,64],[139,154]]

// Initialize board = false (scalar fill)
i = 0;
while (i < 8) {
  j = 0;
  while (j < 8) {
    board[i,j] = false;
    j = j + 1;
  }
  i = i + 1;
}

queens(board);

// print as 1/0 chessboard
r = 0;
while (r < 8) {
  c = 0;
  while (c < 8) {
    printInt((int)board[r,c]);
    if (c + 1 < 8) printSpaces(1);
    c = c + 1;
  }
  printNewlines(1);
  r = r + 1;
}

return 0;
}