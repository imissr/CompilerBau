/ array.cvc
#include "civic.h"


    void printIntVec(int[n] vec) {
  for (int i = 0, n) {
    printInt(vec[i]);
    if (i + 1 < n) printSpaces(1);
  }
  printNewlines(1);
}


void printFloatVec(float[n] vec) {
  for (int i = 0, n) {
    printFloat(vec[i]);
    if (i + 1 < n) printSpaces(1);
  }
  printNewlines(1);
}


void printIntMat(int[m, n] mat) {
  for (int i = 0, m) {
    for (int j = 0, n) {
      printInt(mat[i, j]);
      if (j + 1 < n) printSpaces(1);
    }
    printNewlines(1);
  }
}


void printFloatMat(float[m,n] mat) {
   for (int i = 0, m) {
     for (int j = 0, n) {
       printFloat(mat[i, j]);
       if (j + 1 < n) printSpaces(1);
     }
     printNewlines(1);
   }
 }

 void scanIntVec(int[n] vec) {
   for (int i = 0, n) {
     vec[i] = scanInt();
   }
 }

 void scanFloatVec(float[n] vec) {
   for (int i = 0, n) {
     vec[i] = scanFloat();
   }
 }

 void scanIntMat(int[m, n] mat) {
   for (int i = 0, m) {
     for (int j = 0, n) {
       mat[i, j] = scanInt();
     }
   }
 }

 void scanFloatMat(float[m, n] mat) {
   for (int i = 0, m) {
     for (int j = 0, n) {
       mat[i, j] = scanFloat();
     }
   }
 }

 // Matrix multiply: c = a * b
 // Dimensions are expected to be: a[m,n], b[n,p], c[m,p].
 // The function signature uses generic symbols; caller must pass matching sizes.

 void matMul(float[m, n] a, float[o, p] b, float[q, l] c) {
   // assume n==o and q==m and l==p (per assignment intent)
   for (int i = 0, m) {
     for (int j = 0, p) {
       float acc = 0.0;
       for (int k = 0, n) {
          acc = acc + a[i, k] * b[k, j];
       }
       c[i, j] = acc;
     }
   }
 }


 void queens(bool[m, n] a) {
   // ensure square by simple assumption; clear board
   for (int r = 0, m) {
     for (int c = 0, n) a[r, c] = false;
   }

   bool safe(int row, int col) {
     // same column & diagonals upwards (placing row by row)
     for (int r = 0, row) {
       if (a[r, col]) return false;
     }
     int r1 = row;
     int c1 = col;
     while (r1 > 0 && c1 > 0) {
       r1 = r1 - 1;
       c1 = c1 - 1;
       if (a[r1, c1]) return false;
     }
     r1 = row;
     c1 = col;
     while (r1 > 0 && c1 + 1 < n) {
       r1 = r1 - 1;
       c1 = c1 + 1;
       if (a[r1, c1]) return false;
     }
     return true;
   }


   bool solve(int row) {
     if (row == m) return true;
     for (int col = 0, n) {
       if (safe(row, col)) {
         a[row, col] = true;
         if (solve(row + 1)) return true;
         a[row, col] = false;
       }
     }
     return false;
   }


   solve(0);
 }